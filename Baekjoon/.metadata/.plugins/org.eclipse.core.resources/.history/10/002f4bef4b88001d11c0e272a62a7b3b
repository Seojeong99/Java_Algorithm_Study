package algo;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.StringTokenizer;

public class Main_10816_숫자카드2 {

	static int[] check;
//	static int[] check2;
	static int n,n2;
	static StringBuilder sb;
	static HashMap<Integer,Integer> map;
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		sb = new StringBuilder();
		n=Integer.parseInt(st.nextToken());
		
		map=new HashMap<>();
		HashSet<Integer> set=new HashSet<>();
		st = new StringTokenizer(br.readLine());
		
		check=new int[n];
		for(int i=0; i<n; i++) {
			int n=Integer.parseInt(st.nextToken());
			boolean isKeyExists = map.containsKey(n);
			if(isKeyExists==true) {
				map.put(n,map.get(n)+1);
			}//키 존재하면
			else {
				map.put(n,1);
			}
			set.add(n);
		}
		
		int count=0;
		for(int i:set) {
			check[count++]=i;
		}
		
		st = new StringTokenizer(br.readLine());
		n2=Integer.parseInt(st.nextToken());
		st = new StringTokenizer(br.readLine());
		Arrays.sort(check);
		
//		check2=new int[n];
		for(int i=0; i<n2; i++) {
//			check2[i]=Integer.parseInt(st.nextToken());
			find(Integer.parseInt(st.nextToken()));
		}
		
		
	}
	
	static void find(int f) {
		
		StringBuilder sb= new StringBuilder();
		
		int start=0;
		int end=n-1;
		while(start<=end) {
			int m=(start+end)/2;
			if(f>check[m]) {
				start=m+1;
			}//찾으려는 값이 더 크면
			else if(f<check[m]) {
				end=m-1;
			}//찾으려는 값이 더 작으면
			else {
//				System.out.printf("%d ",map.get(f));
				sb.append(b)
				return;
			}//찾으려는 값이라면
			
		}
			System.out.printf("%d ",0);
		
		
	}

}
